import time

try:
    import Rhino
except:
    pass
import rhino3dm
from rhino3dm import _rhino3dm

from plugins.compute import ComputeBinder


class A:
    def __init__(self, pln):
        self.polyline = pln

    @ComputeBinder
    def rhcmp(self, polyline: rhino3dm.Polyline = None, x=None, y=None, z=None):
        import Rhino.Geometry as rg

        rail = rg.NurbsCurve.CreateControlPointCurve \
            ([rg.Point3d(xx, yy, zz) for xx, yy, zz in zip(eval(x), eval(y), eval(z))], 2)
        _, pln = rail.FrameAt(0.0)

        plnn = rg.Plane(pln.Origin, pln.YAxis,
                        pln.ZAxis)
        polyline.Transform(rg.Transform.PlaneToPlane(rg.Plane.WorldXY, plnn))
        swp = rg.SweepOneRail()
        ans = swp.PerformSweep(rail, polyline)
        return ans

    def sweep(self, rail):
        x, y, z = rail
        return self.rhcmp(polyline=self.polyline, x=f'{x}', y=f'{y}', z=f'{z}')["ans"][0]


class SweepRail1:
    def __set_name__(self, owner, name):
        self.name = name

    def __get__(self, instance, owner):
        return self.blob(instance, instance.profile, *instance.rail)

    @ComputeBinder
    def blob(self, polyline: rhino3dm.Polyline = None, x=None, y=None, z=None):
        import Rhino.Geometry as rg
        rail = rg.NurbsCurve.CreateControlPointCurve \
            ([rg.Point3d(xx, yy, zz) for xx, yy, zz in zip(eval(x), eval(y), eval(z))], 2)
        _, pln = rail.FrameAt(0.0)

        plnn = rg.Plane(pln.Origin, pln.YAxis,
                        pln.ZAxis)
        polyline.Transform(rg.Transform.PlaneToPlane(rg.Plane.WorldXY, plnn))
        swp = rg.SweepOneRail()
        ans = swp.PerformSweep(rail, polyline)
        return ans


def test1():
    profile = {"version": 10000, "archive3dm": 70, "opennurbs": -1879014534,
               "data": "+n8CAKUPAAAAAAAA+/8CABQAAAAAAAAA4NTXTkfp0xG/5QAQgwEi8Kr1Koj8/wIAbQ8AAAAAAAAQEAAAAAAAAAAAAAAAAAAAAAAA8D8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAAAAAAAAAAAAEQAAAO48et0rLIZAUITTW3Hph0C+LiZQRiiIQHxcRyr+qohAorlt8SnJiEDImHGX8oeJQPD1l14epolArCO5ONYoikAczgstq2eKQHwVZavwJIxA7L+3n8VjjECm7dh5feaMQNBK/0CpBI1A9CkD53HDjUAchymuneGNQNi0SohVZI5ASF+dfCqjjkD6fwIAzgAAAAAAAAD7/wIAFAAAAAAAAAAZEa9eUQvUEb/+ABCDASLwShp5F/z/AgCWAAAAAAAAABEDAAAAAAAAAAIAAAACAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAAAAAAAAAAAAACAAAA7jx63SsshkBQhNNbcemHQAIAAADA0WLFlyHwvxd2lOVX1EtAAAAAAAAAAADo0WLFlyHwvxd2lOVX1EvAAAAAAAAAAAAAQqCHnv9/AoAAAAAAAAAAAPp/AgAOAQAAAAAAAPv/AgAUAAAAAAAAABkRr15RC9QRv/4AEIMBIvBKGnkX/P8CANYAAAAAAAAAEQMAAAABAAAAAwAAAAMAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAAAAAAAAAAAAAQAAABQhNNbcemHQFCE01tx6YdAvi4mUEYoiEC+LiZQRiiIQAMAAADo0WLFlyHwvxd2lOVX1EvAAAAAAAAAAAAAAAAAAADwPw/qLlAg0Oa/wmTpRjhyRcAAAAAAAAAAAPY7f2aeoOY/cbRY8WUIGMAPdpTlV1ROwAAAAAAAAAAAAAAAAAAA8D8A014mF/9/AoAAAAAAAAAAAPp/AgDOAAAAAAAAAPv/AgAUAAAAAAAAABkRr15RC9QRv/4AEIMBIvBKGnkX/P8CAJYAAAAAAAAAEQMAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAAAAAAAAAAAAAIAAAC+LiZQRiiIQHxcRyr+qohAAgAAAHG0WPFlCBjAD3aU5VdUTsAAAAAAAAAAAJfke8AU2TfAD3aU5VdUTsAAAAAAAAAAAADtoBDZ/38CgAAAAAAAAAAA+n8CAM4AAAAAAAAA+/8CABQAAAAAAAAAGRGvXlEL1BG//gAQgwEi8EoaeRf8/wIAlgAAAAAAAAARAwAAAAAAAAACAAAAAgAAAAAAAAAAAAAAAAAAAAAA8D8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAAAAAAAAAAAAAgAAAHxcRyr+qohAorlt8SnJiEACAAAAl+R7wBTZN8APdpTlV1ROwAAAAAAAAAAAl+R7wBTZN8BCv05P3iBQwAAAAAAAAAAAAEP/Vfn/fwKAAAAAAAAAAAD6fwIAzgAAAAAAAAD7/wIAFAAAAAAAAAAZEa9eUQvUEb/+ABCDASLwShp5F/z/AgCWAAAAAAAAABEDAAAAAAAAAAIAAAACAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAAAAAAAAAAAAACAAAAorlt8SnJiEDImHGX8oeJQAIAAACX5HvAFNk3wEK/Tk/eIFDAAAAAAAAAAACX5HvAFNk3QEK/Tk/eIFDAAAAAAAAAAAAAiixwof9/AoAAAAAAAAAAAPp/AgDOAAAAAAAAAPv/AgAUAAAAAAAAABkRr15RC9QRv/4AEIMBIvBKGnkX/P8CAJYAAAAAAAAAEQMAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAAAAAAAAAAAAAIAAADImHGX8oeJQPD1l14epolAAgAAAJfke8AU2TdAQr9OT94gUMAAAAAAAAAAAJfke8AU2TdAD3aU5VdUTsAAAAAAAAAAAABh6BuW/38CgAAAAAAAAAAA+n8CAM4AAAAAAAAA+/8CABQAAAAAAAAAGRGvXlEL1BG//gAQgwEi8EoaeRf8/wIAlgAAAAAAAAARAwAAAAAAAAACAAAAAgAAAAAAAAAAAAAAAAAAAAAA8D8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAAAAAAAAAAAAAgAAAPD1l14epolArCO5ONYoikACAAAAl+R7wBTZN0APdpTlV1ROwAAAAAAAAAAAgLRY8WUIGEAPdpTlV1ROwAAAAAAAAAAAAFaWNVH/fwKAAAAAAAAAAAD6fwIADgEAAAAAAAD7/wIAFAAAAAAAAAAZEa9eUQvUEb/+ABCDASLwShp5F/z/AgDWAAAAAAAAABEDAAAAAQAAAAMAAAADAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAAAAAAAAAAAAAEAAAArCO5ONYoikCsI7k41iiKQBzOCy2rZ4pAHM4LLatnikADAAAAgLRY8WUIGEAPdpTlV1ROwAAAAAAAAAAAAAAAAAAA8D+g6C5QINDmP5xk6UY4ckXAAAAAAAAAAADNO39mnqDmPwDSYsWXIfA/D3aU5VfUS8AAAAAAAAAAAAAAAAAAAPA/AMIwtDX/fwKAAAAAAAAAAAD6fwIAzgAAAAAAAAD7/wIAFAAAAAAAAAAZEa9eUQvUEb/+ABCDASLwShp5F/z/AgCWAAAAAAAAABEDAAAAAAAAAAIAAAACAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAAAAAAAAAAAAACAAAAHM4LLatnikB8FWWr8CSMQAIAAAAA0mLFlyHwPw92lOVX1EvAAAAAAAAAAADo0WLFlyHwPyd2lOVX1EtAAAAAAAAAAAAA/kDM5/9/AoAAAAAAAAAAAPp/AgAOAQAAAAAAAPv/AgAUAAAAAAAAABkRr15RC9QRv/4AEIMBIvBKGnkX/P8CANYAAAAAAAAAEQMAAAABAAAAAwAAAAMAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAAAAAAAAAAAAAQAAAB8FWWr8CSMQHwVZavwJIxA7L+3n8VjjEDsv7efxWOMQAMAAADo0WLFlyHwPyd2lOVX1EtAAAAAAAAAAAAAAAAAAADwPxjtLlAg0OY/9WTpRjhyRUAAAAAAAAAAACg8f2aeoOY/mLRY8WUIGEAPdpTlV1ROQAAAAAAAAAAAAAAAAAAA8D8A5+hY3v9/AoAAAAAAAAAAAPp/AgDOAAAAAAAAAPv/AgAUAAAAAAAAABkRr15RC9QRv/4AEIMBIvBKGnkX/P8CAJYAAAAAAAAAEQMAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAAAAAAAAAAAAAIAAADsv7efxWOMQKbt2Hl95oxAAgAAAJi0WPFlCBhAD3aU5VdUTkAAAAAAAAAAAJfke8AU2TdAD3aU5VdUTkAAAAAAAAAAAAAYYyYU/38CgAAAAAAAAAAA+n8CAM4AAAAAAAAA+/8CABQAAAAAAAAAGRGvXlEL1BG//gAQgwEi8EoaeRf8/wIAlgAAAAAAAAARAwAAAAAAAAACAAAAAgAAAAAAAAAAAAAAAAAAAAAA8D8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAAAAAAAAAAAAAgAAAKbt2Hl95oxA0Er/QKkEjUACAAAAl+R7wBTZN0APdpTlV1ROQAAAAAAAAAAAl+R7wBTZN0CYs4EKT/BPQAAAAAAAAAAAAP2t8Tr/fwKAAAAAAAAAAAD6fwIAzgAAAAAAAAD7/wIAFAAAAAAAAAAZEa9eUQvUEb/+ABCDASLwShp5F/z/AgCWAAAAAAAAABEDAAAAAAAAAAIAAAACAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAAAAAAAAAAAAACAAAA0Er/QKkEjUD0KQPnccONQAIAAACX5HvAFNk3QJizgQpP8E9AAAAAAAAAAACX5HvAFNk3wJizgQpP8E9AAAAAAAAAAAAAYu5ET/9/AoAAAAAAAAAAAPp/AgDOAAAAAAAAAPv/AgAUAAAAAAAAABkRr15RC9QRv/4AEIMBIvBKGnkX/P8CAJYAAAAAAAAAEQMAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAAAAAAAAAAAAAIAAAD0KQPnccONQByHKa6d4Y1AAgAAAJfke8AU2TfAmLOBCk/wT0AAAAAAAAAAAJfke8AU2TfAD3aU5VdUTkAAAAAAAAAAAAAKnxVa/38CgAAAAAAAAAAA+n8CAM4AAAAAAAAA+/8CABQAAAAAAAAAGRGvXlEL1BG//gAQgwEi8EoaeRf8/wIAlgAAAAAAAAARAwAAAAAAAAACAAAAAgAAAAAAAAAAAAAAAAAAAAAA8D8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAAAAAAAAAAAAAgAAAByHKa6d4Y1A2LRKiFVkjkACAAAAl+R7wBTZN8APdpTlV1ROQAAAAAAAAAAAOLRY8WUIGMAPdpTlV1ROQAAAAAAAAAAAAPwHQBn/fwKAAAAAAAAAAAD6fwIADgEAAAAAAAD7/wIAFAAAAAAAAAAZEa9eUQvUEb/+ABCDASLwShp5F/z/AgDWAAAAAAAAABEDAAAAAQAAAAMAAAADAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAAAAAAAAAAAAAEAAAA2LRKiFVkjkDYtEqIVWSOQEhfnXwqo45ASF+dfCqjjkADAAAAOLRY8WUIGMAPdpTlV1ROQAAAAAAAAAAAAAAAAAAA8D/y6S5QINDmv9dk6UY4ckVAAAAAAAAAAAARPH9mnqDmP8DRYsWXIfC/F3aU5VfUS0AAAAAAAAAAAAAAAAAAAPA/AJn02k7/fwKAAAAAAAAAAADLm1fb/38CgAAAAAAAAAAA"}
    rail = [[0.0, 10.0, 20.0, 30.0, 40.0, 50.0, 60.0],
            [0.0, 10.00, 20.0, 30.0, 50.0, 180.0, 339.0],
            [0.0, 20.0, 50.0, 100.0, 140.0, 255.0, 360.0]]
    a = A(_rhino3dm.CommonObject.Decode(profile))
    print(a)

    brp = a.sweep(rail)
    print(brp)

    model = rhino3dm.File3dm()
    model.Objects.AddBrep(brep=brp)
    model.Write(f"artifacts/test_compute_{time.time_ns()}.3dm", 7)
